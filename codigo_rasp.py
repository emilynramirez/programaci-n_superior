# -*- coding: utf-8 -*-
"""CodigoRasp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D1NN0FNczuR2duKqv0M3ieVX7e2CCXJk
"""

import cv2
import numpy as np
import RPi.GPIO as GPIO
import time

# Configuración de GPIO para los LEDs
GPIO.setmode(GPIO.BCM)  # Usar numeración GPIO (BCM)
led_verde = 18  # LED para fruta no madura (verde) en GPIO 18
led_amarillo = 23  # LED para fruta madura (amarillo) en GPIO 23

# Configurar los pines como salida
GPIO.setup(led_verde, GPIO.OUT)
GPIO.setup(led_amarillo, GPIO.OUT)

# Función para encender un LED específico
def encender_led(pin_led, mensaje):
    apagar_leds()  # Asegurarse de apagar todos los LEDs antes
    GPIO.output(pin_led, GPIO.HIGH)
  #  print(f"{mensaje} - LED en pin GPIO {pin_led} encendido.")  # Confirmación en consola

# Función para apagar todos los LEDs
def apagar_leds():
    GPIO.output(led_verde, GPIO.LOW)
    GPIO.output(led_amarillo, GPIO.LOW)
  #  print("Todos los LEDs apagados.")  # Confirmación en consola

# Función para detectar colores verde (no madura) y amarillo (madura)
def detectar_fruta(frame):
    # Reducir resolución para acelerar procesamiento
    frame_resized = cv2.resize(frame, (320, 240))

    # Convertir a espacio de color HSV
    hsv = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2HSV)

    # Rango para detectar fruta verde (no madura)
    lower_green = np.array([40, 70, 70])  # Verde más específico
    upper_green = np.array([80, 255, 255])

    # Rango para detectar fruta amarilla (madura)
    lower_yellow = np.array([20, 120, 120])  # Amarillo ajustado
    upper_yellow = np.array([35, 255, 255])

    # Crear máscaras para detectar los colores
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)

    # Detectar contornos verdes (no maduras)
    contours_green, _ = cv2.findContours(mask_green, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    # Detectar contornos amarillos (maduras)
    contours_yellow, _ = cv2.findContours(mask_yellow, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Verificar cuál color está presente y encender los LEDs correspondientes
    if len(contours_yellow) > 0:
        encender_led(led_amarillo, "Fruta madura")  # Fruta madura (amarillo)
    elif len(contours_green) > 0:
        encender_led(led_verde, "Fruta inmadura")  # Fruta no madura (verde)
    else:
        apagar_leds()  # No hay fruta detectada

    return frame_resized, mask_green, mask_yellow

# Inicializar captura de video
cap = cv2.VideoCapture("/dev/video0", cv2.CAP_V4L2)

# Configuración de la cámara
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)  # Reducir resolución
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
cap.set(cv2.CAP_PROP_FPS, 15)  # Limitar a 15 FPS

try:
    while True:
        # Capturar un fotograma
        ret, frame = cap.read()
        if not ret:
            print("Error al acceder a la cámara.")
            break

        # Detectar frutas (verde o amarillo)
        frame_resized, mask_green, mask_yellow = detectar_fruta(frame)

        # Mostrar resultados
        cv2.imshow('Original', frame_resized)
        cv2.imshow('Fruta no madura (Verde)', mask_green)
        cv2.imshow('Fruta madura (Amarillo)', mask_yellow)

        # Salir del bucle al presionar 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
finally:
    # Liberar recursos
    cap.release()
    cv2.destroyAllWindows()
    GPIO.cleanup()
    print("Programa terminado y GPIO limpiado.")